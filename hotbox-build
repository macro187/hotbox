#!/bin/sh
set -eu
HOTBOX=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)


. $HOTBOX/lib/sh.sh
. $HOTBOX/lib/state.sh


#
# Command line arguments
#
extra_sources=
while test $# -gt 0 ; do
    case $1 in
        --source)
            shift
            test $# -gt 0 || die "Expected <source>"
            extra_sources="$extra_sources $1"
            shift
            ;;
        -*)
            die "Unrecognised option '$1'"
            ;;
        *)
            break
            ;;
    esac
done

test $# -gt 0 || die "Expected <spec>"
spec="$1" ; shift

test $# -eq 0 || die "Unexpected argument '$1'"


#
# Collect sources
#
sources=$HOTBOX_STATE/sources/$spec
heading "Collecting specs and features"
echo_on
rm -rf $sources
mkdir -p $sources
cp $HOTBOX/specs/* $sources
cp $HOTBOX/features/* $sources
echo_off
for source in $extra_sources ; do
    echo_on
    cp $source/*.spec.sh $sources 2>/dev/null || true
    cp $source/*.feature.sh $sources 2>/dev/null || true
    echo_off
done


#
# Build Docker context
#
context=$HOTBOX_STATE/context/$spec
heading "Building Docker build context"
echo_on
rm -rf $context
mkdir -p $context
cp -R $HOTBOX $context/hotbox
rm -rf $context/hotbox/.git
cp -R $sources $context/hotbox-sources
echo_off


#
# Read container information from <spec>
#
features=$(echo $($HOTBOX/lib/read-spec $sources $spec feature))
baseimage=$($HOTBOX/lib/read-spec $sources $spec baseimage | tail -n 1)
shell=$($HOTBOX/lib/read-spec $sources $spec shell | tail -n 1)
shellarg=$($HOTBOX/lib/read-spec $sources $spec shellarg | tail -n 1)
test -n "$baseimage" || die "No baseimage specified in $spec spec"
test -n "$shell" || die "No shell specified in $spec spec"


#
# Work out additional container information
#
image="hotbox-$spec"
user="$(current_user)"
uid="$(current_uid)"
gid="$(current_gid)"
docker_gid="$(getent group docker | cut -d: -f3)"


#
# Build container image
#
heading "Building $image container image"
echo_on
PROGRESS_NO_TRUNC=1 \
docker build \
    --progress plain \
    --network=host \
    \
    -t $image \
    \
    --label hotbox \
    --label "hotbox.features=$features" \
    --label hotbox.shell=$shell \
    --label hotbox.shellarg=$shellarg \
    \
    --build-arg baseimage=$baseimage \
    --build-arg spec=$spec \
    --build-arg user=$user \
    --build-arg uid=$uid \
    --build-arg gid=$gid \
    --build-arg docker_gid=$docker_gid \
    \
    -f - \
    $context \
    < $HOTBOX/lib/Dockerfile
echo_off


#
# Clean up context
#
heading "Cleaning up Docker build context"
echo_on
rm -rf $context
echo_off


#
# Clean up unused intermediate container images
#
heading "Pruning hotbox container images"
echo_on
docker image prune -f --filter label=hotbox
echo_off
