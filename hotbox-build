#!/bin/sh
set -eu ; set -o | grep -q pipefail && set -o pipefail
HOTBOX=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)
PATH="$HOTBOX:$HOTBOX/lib:$PATH"


. "$HOTBOX/lib/sh.sh"
export HOTBOX_STATE="$(hotbox-state-init)"
export HOTBOX_TXN="$(hotbox-txn-begin $$)"
. "$HOTBOX/lib/hotbox-txn-end-on-exit.sh"
. "$HOTBOX/lib/sources.sh"


refresh=
commandline_sources=
while test $# -gt 0 ; do
    case $1 in
        --source)
            shift
            [ $# -gt 0 ] || die "Expected <source>"
            commandline_sources="$commandline_sources $1"
            shift
            ;;
        --refresh)
            shift
            refresh=1
            ;;
        -*)
            die "Unrecognised option '$1'"
            ;;
        *)
            break
            ;;
    esac
done

[ $# -gt 0 ] || die "Expected <spec>"
spec="$1" ; shift

[ $# -eq 0 ] || die "Unexpected argument '$1'"


for source in $commandline_sources ; do
    add_source "$source"
done


sources_snapshot="$HOTBOX_STATE/sources/$spec.next"
rm -rf "$sources_snapshot"
mkdir -p "$sources_snapshot"
cp "$HOTBOX_SOURCES"/* "$sources_snapshot" || true


heading "Reading '$spec' spec"
baseimage=$(hotbox-spec-read $spec baseimage | tail -n 1 || checkpipe)
[ "$baseimage" ] || die "No baseimage specified in $spec spec"


user="$(current_user)"
uid="$(current_uid)"
gid="$(current_gid)"
docker_gid="$(getent group docker | cut -d: -f3 || checkpipe)"
image="hotbox-$spec:next"


heading "Checking for existing $image container image"
echo_on
imageid="$(docker image ls -q $image)"
echo_off


if [ "$imageid" ] ; then
    heading "Deleting existing $image container image"
    echo_on
    docker image rm -f $image
    echo_off
fi


if [ "$refresh" ] ; then
    heading "Pulling latest $baseimage image"
    echo_on
    docker image pull $baseimage
    echo_off
fi


heading "Forking $image container image from $baseimage"
echo_on
echo "FROM $baseimage" | \
    docker build \
        --label hotbox \
        --tag "$image" \
        - \
    || checkpipe
echo_off


hotbox_mount_options="$(hotbox-feature-run-command container-hotbox run)"


heading "Setting up system features in container"
echo_on
container=$(\
    docker create \
        --network host \
        --hostname hotbox-$spec \
        $hotbox_mount_options \
        --env HOTBOX_REFRESH=$refresh \
        --env HOTBOX_SOURCES=/hotbox-state/sources/$spec.next \
        --env HOTBOX_USER=$user \
        --env HOTBOX_UID=$uid \
        --env HOTBOX_GID=$gid \
        --env HOTBOX_DOCKER_GID=$docker_gid \
        --user root \
        --workdir /root \
        $image \
        /hotbox/hotbox-spec-apply --container --system $spec \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Rebuilding /hotbox mount point in container"
echo_on
container=$(\
    docker create \
        --network host \
        --user root \
        --workdir /root \
        $image \
        /bin/sh -c "rm -rf /hotbox && mkdir /hotbox && chown $user:$user /hotbox && chmod 755 /hotbox" \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Rebuilding /hotbox-state mount point in container"
echo_on
container=$(\
    docker create \
        --network host \
        --user root \
        --workdir /root \
        $image \
        /bin/sh -c "rm -rf /hotbox-state && mkdir /hotbox-state && chown $user:$user /hotbox-state && chmod 755 /hotbox-state" \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Setting up features in container"
echo_on
container=$(\
    docker create \
        --network host \
        $hotbox_mount_options \
        --env HOTBOX_REFRESH=$refresh \
        --env HOTBOX_SOURCES=/hotbox-state/sources/$spec.next \
        --env HOTBOX_USER=$user \
        --env HOTBOX_UID=$uid \
        --env HOTBOX_GID=$gid \
        --env HOTBOX_DOCKER_GID=$docker_gid \
        --user $user \
        --workdir /home/$user \
        $image \
        /hotbox/hotbox-spec-apply --container $spec \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Setting final container metadata"
echo_on
container=$(\
    docker create \
        --env HOTBOX_REFRESH= \
        --env HOTBOX_SOURCES= \
        --env HOTBOX_USER= \
        --env HOTBOX_UID= \
        --env HOTBOX_GID= \
        --env HOTBOX_DOCKER_GID= \
        --env HOTBOX_STATE= \
        --user $user \
        --workdir /home/$user \
        $image \
        /bin/sh -l \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Committing final $spec container image"
echo_on
docker tag $image hotbox-$spec
rm -rf $HOTBOX_STATE/sources/$spec
mv $sources_snapshot $HOTBOX_STATE/sources/$spec
docker image rm -f $image
echo_off


heading "Pruning orphaned hotbox containers and images"
echo_on
docker container prune -f --filter label=hotbox
docker image prune -f --filter label=hotbox
echo_off
