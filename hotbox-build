#!/bin/sh
set -eu ; set -o | grep -q pipefail && set -o pipefail
HOTBOX=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)


. $HOTBOX/lib/sh.sh
. $HOTBOX/lib/state.sh


refresh=
commandline_sources=
while test $# -gt 0 ; do
    case $1 in
        --source)
            shift
            test $# -gt 0 || die "Expected <source>"
            commandline_sources="$commandline_sources $1"
            shift
            ;;
        --refresh)
            shift
            refresh=1
            ;;
        -*)
            die "Unrecognised option '$1'"
            ;;
        *)
            break
            ;;
    esac
done

test $# -gt 0 || die "Expected <spec>"
spec="$1" ; shift

test $# -eq 0 || die "Unexpected argument '$1'"


heading "Collecting features and specs"
hotbox_sources="$HOTBOX/specs $HOTBOX/features"
hotbox_path_sources="$(echo "${HOTBOX_PATH:-}" | tr ':' ' ')"
hotbox_path_sources="$(reverse $hotbox_path_sources)"
all_sources="$hotbox_sources $hotbox_path_sources $commandline_sources"
sources_snapshot="$HOTBOX_STATE/sources/$spec.next"
rm -rf $sources_snapshot
mkdir -p $sources_snapshot
for source in $all_sources ; do
    source="${source%/}"
    if [ ! -d $source ] ; then
        info "(ignoring source $source because it doesn't exist)"
        continue
    fi
    info "$source"
    cp $source/*.spec.sh $sources_snapshot 2>/dev/null || true
    cp $source/*.feature.sh $sources_snapshot 2>/dev/null || true
done


heading "Reading '$spec' spec"
features=$($HOTBOX/lib/read-spec $sources_snapshot $spec feature)
features=$(echo $features)
baseimage=$($HOTBOX/lib/read-spec $sources_snapshot $spec baseimage | tail -n 1 || checkpipe)
shell=$($HOTBOX/lib/read-spec $sources_snapshot $spec shell | tail -n 1 || checkpipe)
shellarg=$($HOTBOX/lib/read-spec $sources_snapshot $spec shellarg | tail -n 1 || checkpipe)
test -n "$baseimage" || die "No baseimage specified in $spec spec"
test -n "$shell" || die "No shell specified in $spec spec"


user="$(current_user)"
uid="$(current_uid)"
gid="$(current_gid)"
docker_gid="$(getent group docker | cut -d: -f3 || checkpipe)"
image="hotbox-$spec:next"


heading "Checking for existing $image container image"
echo_on
imageid="$(docker image ls -q $image)"
echo_off


if [ -n "$imageid" ] ; then
    heading "Deleting existing $image container image"
    echo_on
    docker image rm -f $image
    echo_off
fi


if [ -n "$refresh" ] ; then
    heading "Pulling latest $baseimage image"
    echo_on
    docker image pull $baseimage
    echo_off
fi


heading "Forking $image container image from $baseimage"
echo_on
echo "FROM $baseimage" | \
    docker build \
        --label hotbox \
        -t "$image" \
        - \
    || checkpipe
echo_off


hotbox_mount_options="$($HOTBOX/lib/run-feature-command $sources_snapshot container-hotbox run)"


heading "Setting up system features in container"
echo_on
container=$(\
    docker create \
        --network host \
        --hostname hotbox-$spec \
        $hotbox_mount_options \
        --env HOTBOX_REFRESH=$refresh \
        --env HOTBOX_SOURCES=/hotbox-state/sources/$spec.next \
        --env HOTBOX_USER=$user \
        --env HOTBOX_UID=$uid \
        --env HOTBOX_GID=$gid \
        --env HOTBOX_DOCKER_GID=$docker_gid \
        --user root \
        --workdir /root \
        $image \
        /hotbox/hotbox-apply-spec --system $spec \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Rebuilding /hotbox mount point in container"
echo_on
container=$(\
    docker create \
        --network host \
        --user root \
        --workdir /root \
        $image \
        /bin/sh -c "rm -rf /hotbox && mkdir /hotbox && chown $user:$user /hotbox && chmod 755 /hotbox" \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Rebuilding /hotbox-state mount point in container"
echo_on
container=$(\
    docker create \
        --network host \
        --user root \
        --workdir /root \
        $image \
        /bin/sh -c "rm -rf /hotbox-state && mkdir /hotbox-state && chown $user:$user /hotbox-state && chmod 755 /hotbox-state" \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Setting up features in container"
echo_on
container=$(\
    docker create \
        --network host \
        $hotbox_mount_options \
        --env HOTBOX_REFRESH=$refresh \
        --env HOTBOX_SOURCES=/hotbox-state/sources/$spec.next \
        --env HOTBOX_USER=$user \
        --env HOTBOX_UID=$uid \
        --env HOTBOX_GID=$gid \
        --env HOTBOX_DOCKER_GID=$docker_gid \
        --user $user \
        --workdir /home/$user \
        $image \
        /hotbox/hotbox-apply-spec $spec \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Setting final container metadata"
echo_on
container=$(\
    docker create \
        --env HOTBOX_REFRESH= \
        --env HOTBOX_SOURCES= \
        --env HOTBOX_USER= \
        --env HOTBOX_UID= \
        --env HOTBOX_GID= \
        --env HOTBOX_DOCKER_GID= \
        --env HOTBOX_STATE= \
        --user $user \
        --workdir /home/$user \
        $image \
        /bin/sh -l \
        )
docker start -ai $container
docker commit $container $image
echo_off


heading "Committing final $spec container image"
echo_on
docker tag $image hotbox-$spec
rm -rf $HOTBOX_STATE/sources/$spec
mv $sources_snapshot $HOTBOX_STATE/sources/$spec
docker image rm -f $image
echo_off


heading "Pruning orphaned hotbox containers and images"
echo_on
docker container prune -f --filter label=hotbox
docker image prune -f --filter label=hotbox
echo_off
