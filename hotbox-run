#!/bin/sh
set -eu
HOTBOX=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)


. $HOTBOX/lib/sh.sh


#
# Command line arguments
#
volume1=""
volume2=""
volume3=""
spec=""
name=""

while test $# -gt 0 ; do
    case $1 in
        --volume)
            shift
            test $# -gt 0 || die "Expected <volume>"
            if [ -z "$volume1" ] ; then
                volume1="$1"
            elif [ -z "$volume2" ] ; then
                volume2="$1"
            elif [ -z "$volume3" ] ; then
                volume3="$1"
            else
                die "Too many --volume's"
            fi
            shift
            ;;
        -*)
            die "Unrecognised option '$1'"
            ;;
        *)
            break
            ;;
    esac
done

test $# -gt 0 || die "Expected <spec>"
spec="$1" ; shift

test $# -gt 0 || die "Expected <name>"
name="$1" ; shift

# Remaining args are <command> and <args>

spec="${spec:-alpine}"
name="${name:-$spec}"


#
# Read information from container image metadata
#
image="hotbox-$spec"

image_id="$(docker image ls -q $image)"
test -n "$image_id" || die "Image $image for spec $spec not found"

features="$(docker inspect --format '{{ index .ContainerConfig.Labels "hotbox.features"}}' $image_id)"
test -n "$features" || die "No hotbox.features label found on container image"

shell="$(docker inspect --format '{{ index .ContainerConfig.Labels "hotbox.shell"}}' $image_id)"
shellarg="$(docker inspect --format '{{ index .ContainerConfig.Labels "hotbox.shellarg"}}' $image_id)"
test -n "$shell" || die "No hotbox.shell label found on container image"


#
# Default to a login shell if no <command> was specified
#
if [ $# -eq 0 ] ; then
    set -- $shell $shellarg
fi


#
# If the container is already running, join it
#
container_id=$(docker ps -q --filter label=hotbox.name=$name)
if [ -n "$container_id" ] ; then
    heading "Joining $name hotbox container $container_id"

    container_image="$(docker inspect --format '{{ .Config.Image }}' $container_id)"
    test "$container_image" = "$image" || die "Container image $container_image does not match specified image $image"

    workdir="$(docker inspect --format '{{ index .Config.Labels "hotbox.workdir"}}' $container_id)"
    test -n "$workdir" || die "No hotbox.workdir label found on container"

    echo_on
    docker exec \
        --interactive \
        --tty \
        --workdir $workdir \
        $container_id \
        $@
    echo_off

    exit
fi


#
# Collect docker run options from features
#
options="--workdir /root"
for feature in $features ; do
    feature_dir="$($HOTBOX/lib/find-feature $feature)"
    test -n "$feature_dir" || die "Feature $feature not found"
    feature_run_script="$feature_dir/$feature.feature.run.sh"
    test -f $feature_run_script || continue
    feature_options="$(env HOTBOX=$HOTBOX /bin/sh -eu $feature_run_script)"
    options="$options $feature_options"
done
options="$(echo $options)"


#
# Grab workdir from last --workdir option
#
workdir="${options##*--workdir }"
workdir="${workdir%% *}"
test -n "$workdir" || die "no --workdir found in docker run options"


#
# Run the container
#
heading "Starting $name hotbox container from $image image"
echo_on
docker run \
    --rm \
    -it \
    --ipc=host \
    --network=host \
    \
    --label hotbox.name=$name \
    --label hotbox.workdir=$workdir \
    --env HOTBOX_NAME=$name \
    \
    $options \
    \
    ${volume1:+--volume $volume1} \
    ${volume2:+--volume $volume2} \
    ${volume3:+--volume $volume3} \
    \
    $image \
    \
    $@
echo_off
