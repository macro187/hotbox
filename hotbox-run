#!/bin/sh
set -eu ; set -o | grep -q pipefail && set -o pipefail
HOTBOX=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)


. $HOTBOX/lib/sh.sh
. $HOTBOX/lib/state.sh


#
# Command line arguments
#
volume_options=""
workdir=""
spec=""
name=""
while test $# -gt 0 ; do
    case $1 in
        --volume)
            shift
            test $# -gt 0 || die "Expected <volume>"
            volume_src="${1%%:*}"
            volume_dst="${1#*:}"
            test -n "$volume_src" || die "Unrecognised volume format: $1"
            test -n "$volume_dst" || die "Unrecognised volume format: $1"
            volume_src_mapped="$($HOTBOX/lib/map-container-path "$volume_src")"
            test -n "$volume_src_mapped" || die "Unable to map --volume $volume_src to host"
            volume_options="$volume_options --volume $volume_src_mapped:$volume_dst"
            shift
            ;;
        --workdir)
            shift
            test $# -gt 0 || die "Expected <workdir>"
            workdir="$1"
            shift
            ;;
        -*)
            die "Unrecognised option '$1'"
            ;;
        *)
            break
            ;;
    esac
done

test $# -gt 0 || die "Expected <spec>"
spec="$1" ; shift

test $# -gt 0 || die "Expected <name>"
name="$1" ; shift

# Remaining args are <command> and <args>

spec="${spec:-alpine}"
name="${name:-$spec}"
image="hotbox-$spec"
sources=$HOTBOX_STATE/sources/$spec


features=$($HOTBOX/lib/read-spec $sources $spec container feature)
features=$(echo $features)
shell=$($HOTBOX/lib/read-spec $sources $spec container shell | tail -n 1 || checkpipe)
shellarg=$($HOTBOX/lib/read-spec $sources $spec container shellarg | tail -n 1 || checkpipe)
test -n "$shell" || die "No shell specified in $spec spec"


#
# Default to a login shell if no <command> was specified
#
if [ $# -eq 0 ] ; then
    set -- $shell $shellarg
fi


#
# If the container is already running, join it
#
container_id=$(docker ps -q --filter label=hotbox.name=$name)
if [ -n "$container_id" ] ; then
    heading "Joining running $name hotbox ($container_id)"

    container_image="$(docker inspect --format '{{ .Config.Image }}' $container_id)"
    test "$container_image" = "$image" || die "Container image $container_image does not match specified image $image"

    if [ -z "$workdir" ] ; then
        workdir="$(docker inspect --format '{{ index .Config.Labels "hotbox.workdir"}}' $container_id)"
        test -n "$workdir" || die "No hotbox.workdir label found on container"
    fi

    echo_on
    docker exec \
        --interactive \
        --tty \
        --detach-keys "ctrl-\\,ctrl-\\" \
        --workdir $workdir \
        $container_id \
        $@
    echo_off

    exit
fi


#
# Collect docker run options from features
#
options="--workdir /root"
for feature in $features ; do
    feature_options="$($HOTBOX/lib/run-feature-command $sources $feature run)"
    options="$options $feature_options"
done
if [ -n "$workdir" ] ; then
    options="$options --workdir $workdir"
fi
options="$(echo $options)"


#
# Grab workdir from last --workdir option
#
workdir="${options##*--workdir }"
workdir="${workdir%% *}"
test -n "$workdir" || die "no --workdir found in docker run options"


#
# Run the container
#
heading "Starting $name hotbox from $spec spec"
echo_on
docker run \
    --interactive \
    --tty \
    --detach-keys "ctrl-\\,ctrl-\\" \
    --rm \
    --ipc=host \
    --network=host \
    --hostname $name \
    \
    --label hotbox.name=$name \
    --label hotbox.workdir=$workdir \
    \
    $options \
    \
    $volume_options \
    \
    $image \
    \
    $@
echo_off
